@toc cm_escape;; Escape
= Escape character

~\\~ can be used to "escape" the character that follows it, if it would otherwise trigger a markup processing. That allows to include such special characters in the text. (Another option is to redefine the meaning of special characters through {:.lc cm_pragmas}.)

~~~
= This is a header
\= This is not a header

# This is a comment
\# This is not a comment

M-dash ({---}) is written as \{---}
~~~
makes {>}
---.box
= This is a header
\= This is not a header

# This is a comment
\# This is not a comment

M-dash ({---}) is written as \{---}
---

~\\~ also has two other functions:
* As the *last non-blank* character on a line, ~\\~ "joins" the line with the next one for the purpose of processing {---} it allows the contents to continue on the next line.
* ~\\n~ forces a line break in the output.

~~~
=== This is a header that is on \
three source lines,\
and has a line\nbreak in it.
~~~
makes {>}
---.box
=== This is a header that is on \
three source lines,\
and has a line\nbreak in it.
---

To insert a literal ~\\~ character, it itself needs to be escaped (doubled):
~~~
This line contains a literal '\\n' and ends in a backslash: \\
~~~
makes {>}
---.box
This line contains a literal '\\n' and ends in a backslash: \\
---
